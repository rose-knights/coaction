{"version":3,"sources":["app.js","services/task-service.js","services/user-service.js","tasks/task-controller.js","tasks/task.js","users/new-user-controller.js","users/user-controller.js","users/user.js","new-tasks/new-task-controller.js","errors/404/error-404-controller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACppDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["// Declare our app module, and import the ngRoute and ngAnimate\n// modules into it.\nvar app = angular.module('app', ['ngRoute']);\n\n// Set up our 404 handler\napp.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.otherwise({\n    controller: 'Error404Ctrl',\n    controllerAs: 'vm',\n    templateUrl: 'static/errors/404/error-404.html'\n  });\n}]);\n","app.factory('taskService', ['$http', '$log', function($http, $log) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, task) {\n    return processAjaxPromise($http.post(url, task));\n  }\n\n  function put(url, data) {\n    return processAjaxPromise($http.put(url, data));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      var data = result.data;\n      console.log(data.tasks);\n      return data.tasks;\n    })\n    .catch(function (error) {\n      $log.log(error);\n      throw error;\n    });\n  }\n\n  return {\n    getTaskList: function () {\n      return get('/tasks/');\n    },\n\n    getTaskById: function (id) {\n      return get('/tasks/' + id);\n    },\n\n    addTask: function (task) {\n      return post('/tasks/', task);\n    },\n\n    removeTask: function (id) {\n      return remove('/tasks/' + id);\n    },\n\n    updateTask: function (id, data) {\n      return put('/tasks/' + id, data);\n    }\n  };\n}]);\n","app.factory('userService', ['$http', '$log', function ($http, $log) {\n\n  function get(url) {\n    return processAjaxPromise($http.get(url));\n  }\n\n  function post(url, data) {\n    return processAjaxPromise($http.post(url, data));\n  }\n\n  function put(url, data) {\n    return processAjaxPromise($http.put(url, data));\n  }\n\n  function remove(url) {\n    return processAjaxPromise($http.delete(url));\n  }\n\n  function processAjaxPromise(p) {\n    return p.then(function (result) {\n      var data = result.data;\n      console.log(data.tasks);\n      return data.tasks;\n    })\n    .catch(function (error) {\n      $log.log(error);\n      throw error;\n    });\n  }\n\n  return {\n    getUserList: function () {\n      return get('/users/');\n    },\n\n    getUserById: function (id) {\n      return get('/users/' + id);\n    },\n\n    loginUser: function (user) {\n      console.log(user);\n      return post('/login/', user);\n    },\n\n    addUser: function (user) {\n      return post('/register/', user);\n    },\n\n    logoutUser: function () {\n      return post('/logout/');\n    },\n\n    removeUser: function (id) {\n      return remove('/users/' + id);\n    },\n\n    updateUser: function (id, data) {\n      return put('/users/' + id, data)\n    }\n  };\n}]);\n","app.config(['$routeProvider', function ($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/tasks/my-tasks.html',\n    controller: 'TaskCtrl',\n    controllerAs: 'vm',\n    resolve: {\n      tasks: ['taskService', function (taskService) {\n        return taskService.getTaskList();\n      }]\n    }\n  };\n\n  // $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/my-tasks', routeDefinition);\n}])\n.controller('TaskCtrl', ['$location', 'tasks', 'taskService', 'userService', function ($location, tasks, taskService, userService) {\n  var self = this;\n\n  self.tasks = tasks;\n\n  self.removeTask = function (id) {\n    taskService.removeTask(id).then(function () {\n      for (var i = 0; i < self.tasks.length; ++i) {\n        if (self.tasks[i].id === id) {\n          self.tasks.splice(i, 1);\n          break;\n        }\n      }\n    }).catch(function () {\n      alert('failed to delete');\n    })\n  }\n\n  self.addTaskPage = function () {\n    $location.path('/new-task');\n  }\n\n  self.changeStatus = function (task, status) {\n    task.status = status;\n    taskService.updateTask(task.id, task);\n  }\n\n  self.logoutUser = function () {\n    alert('fire');\n    return userService.logoutUser().then(self.goToLoginPage());\n  }\n\n  self.goToLoginPage = function () {\n    $location.path('/login');\n  }\n\n}]);\n","app.factory('Task', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      title: spec.title,\n      description: spec.description,\n      status: spec.status,\n      createdOn: spec.createdOn,\n      dueOn: spec.dueOn\n    };\n  };\n});\n","app.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.when('/register', {\n    templateUrl: 'static/users/register.html',\n    controller: 'NewUserCtrl',\n    controllerAs: 'vm'\n  });\n}]).controller('NewUserCtrl', ['$location', 'userService', 'User', function ($location, userService, User) {\n\n  var self = this;\n  self.user = User();\n\n  self.addUser = function () {\n    console.log(self.user);\n    userService.addUser(self.user).then(self.goToTasks());\n  }\n\n  self.goToTasks = function () {\n    $location.path('/my-tasks');\n  }\n}]);\n","app.config(['$routeProvider', function ($routeProvider) {\n  var routeDefinition = {\n    templateUrl: 'static/users/login.html',\n    controller: 'UserCtrl',\n    controllerAs: 'vm'\n    // resolve: {\n    //   users: ['userService', function (userService) {\n    //     return userService.getUserList();\n    //   }]\n    // }\n  }\n\n  $routeProvider.when('/', routeDefinition);\n  $routeProvider.when('/login', routeDefinition);\n}])\n.controller('UserCtrl', ['$location', 'userService', 'User', function($location, userService, User){\n  var self = this;\n  self.user = User();\n  // self.users = users;\n\n  self.addUserPage = function () {\n    $location.path('/register');\n  }\n\n  self.loginUser = function (user) {\n    return userService.loginUser(self.user).then(function () {\n      return self.goToTasks();\n    });\n  }\n\n  self.goToTasks = function () {\n    $location.path('/my-tasks');\n  }\n}]);\n","app.factory('User', function () {\n  return function (spec) {\n    spec = spec || {};\n    return {\n      username: spec.username || '',\n      password: spec.password || '',\n      name: spec.name,\n      email: spec.email\n    };\n  };\n});\n","app.config(['$routeProvider', function($routeProvider) {\n  $routeProvider.when('/new-task', {\n    templateUrl: 'static/new-tasks/new-task.html',\n    controller: 'NewTaskCtrl',\n    controllerAs: 'vm'\n  });\n}]).controller('NewTaskCtrl', ['$location', 'taskService', 'Task', function ($location, taskService, Task) {\n\n  var self = this;\n  self.task = Task();\n\n  self.addTask = function () {\n    taskService.addTask(self.task).then(self.goToTasks);\n  }\n\n  self.goToTasks = function () {\n    $location.path('/my-tasks');\n  }\n\n}]);\n","app.controller('Error404Ctrl', ['$location', function ($location) {\n  var self = this;\n\n  this.message = 'Could not find: ' + $location.url();\n  self.goBack = function() {\n    location.reload();\n  }\n}]);\n"],"sourceRoot":"/source/"}